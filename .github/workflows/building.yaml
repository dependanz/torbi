# Based on https://github.com/rusty1s/pytorch_scatter/blob/master/.github/workflows/building.yml

name: Building Wheels

on: [workflow_dispatch]

jobs:

  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-22.04, macos-14, windows-2022, ubuntu-22.04-arm]
        os: [ubuntu-22.04, macos-14, windows-2022]
        python-version: ['3.9']
        torch-version: ['2.6.0', '2.7.0', '2.7.1', '2.8.0']
        cuda-version: ['cpu', 'cu124', 'cu126', 'cu128', 'cu129']
        exclude:
          - torch-version: 2.6.0
            cuda-version: 'cu128'
          - torch-version: 2.6.0
            cuda-version: 'cu129'

          - torch-version: 2.7.0
            cuda-version: 'cu124'
          - torch-version: 2.7.0
            cuda-version: 'cu129'

          - torch-version: 2.7.1
            cuda-version: 'cu124'
          - torch-version: 2.7.1
            cuda-version: 'cu129'

          - torch-version: 2.8.0
            cuda-version: 'cu124'

          - os: macos-14
            cuda-version: 'cu124'
          - os: macos-14
            cuda-version: 'cu126'
          - os: macos-14
            cuda-version: 'cu128'
          - os: macos-14
            cuda-version: 'cu129'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade setuptools
          pip install wheel

      - uses: actions/github-script@v7
        if: ${{ runner.os != 'macOS' && matrix.cuda-version != 'cpu'}}
        id: cuda_ver
        with:
          result-encoding: string
          script: |
            const n = '${{ matrix.cuda-version }}'.replace(/^cu/,'');  // 129
            return `${n.slice(0,2)}.${n.slice(2)}.0`;          // 12.9.0
      - run: echo "CUDA=${{ steps.cuda_ver.outputs.result }}"

      - name: Free Disk Space (Ubuntu)
        if: ${{ runner.os == 'Linux' }}
        uses: jlumbroso/free-disk-space@main

      # - name: Install CUDA ${{ matrix.cuda-version }} (Linux)
      #   if: ${{ matrix.cuda-version != 'cpu' && runner.os == 'Linux' }}
      #   run: |
      #     CUDA_VERSION_STRING=${{ matrix.cuda-version }}
      #     echo "($CUDA_VERSION_STRING)"
      #     ver=${CUDA_VERSION_STRING#cu}
      #     major=${ver:0:2}
      #     minor=${ver:2:1}
      #     wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb
      #     sudo dpkg -i cuda-keyring_1.1-1_all.deb
      #     sudo apt-get update
      #     sudo apt-get install -y "cuda-toolkit-$major-$minor"
      #     sudo apt-get clean
      #     echo "CUDA_HOME=/usr/local/cuda-$major.$minor" >> $GITHUB_ENV
      #     echo "/usr/local/cuda-$major.$minor/bin" >> $GITHUB_PATH
      #     echo "LD_LIBRARY_PATH=/usr/local/cuda-$major.$minor/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      #     echo $GITHUB_ENV

      - uses: Jimver/cuda-toolkit@master
        if: ${{ runner.os != 'macOS' && matrix.cuda-version != 'cpu'}}
        id: cuda-toolkit
        with:
          cuda: ${{ steps.cuda_ver.outputs.result }}

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          pip install torch==${{ matrix.torch-version }} torchaudio==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"

      - name: Install Build Deps
        run: |
          pip install build twine "setuptools<70" numpy

      # - name: Patch PyTorch static constexpr on Windows
      #   if: ${{ runner.os == 'Windows' }}
      #   run: |
      #     Torch_DIR=`python -c 'import os; import torch; print(os.path.dirname(torch.__file__))'`
      #     sed -i '31,38c\
      #     TORCH_API void lazy_init_num_threads();' ${Torch_DIR}/include/ATen/Parallel.h
      #   shell: bash

      - name: Set version
        if: ${{ runner.os != 'macOS' }}
        run: |
          VERSION=`sed -n 's/^version = "\([0-9.]*\)".*/\1/p' pyproject.toml`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          echo "New version name: $VERSION+$TORCH_VERSION$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" pyproject.toml
        shell:
          bash

      - name: Build wheel for CPU
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          FORCE_ONLY_CPU=1 python -m build --wheel --no-isolation
        shell:
          bash

      - name: Build wheel for GPU
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          TORCH_CUDA_ARCH_LIST="7.5;8.0;8.6;8.7;8.9;9.0"
          FORCE_CUDA=1 python -m build --wheel --no-isolation
        shell:
          bash

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.torch-version }}-${{ matrix.cuda-version }}
          path: dist/*.whl
          if-no-files-found: error
          retention-days: 14